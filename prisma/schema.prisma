// Updated Prisma schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                        Int              @id @default(autoincrement())
  email                     String           @unique
  password                  String
  emailVerified             Boolean          @default(false)
  lastLoginAt               DateTime?
  failedLoginAttempts       Int              @default(0)
  lockedUntil               DateTime?
  createdAt                 DateTime         @default(now())
  updatedAt                 DateTime         @updatedAt
  messages                  Message[]
  expenses                  Expense[]
  incomes                   Income[]
  categories                Category[]
  pushTokens                PushToken[]
  refreshTokens             RefreshToken[]
  survivalBudgets           SurvivalBudget[]
  categorizationHistory     UserCategorizationHistory[]
  merchantLearning          MerchantLearning[]
  categoryPatterns          CategoryPattern[]
  cliqPatterns              CliqPattern[]
  recurringPayments         RecurringPayment[]
}

model Message {
  id             Int      @id @default(autoincrement())
  content        String
  user           User     @relation(fields: [userId], references: [id])
  userId         Int
  createdAt      DateTime @default(now())
  parsedData     Json?    // Added to store parsed message data
}

model Category {
  id                        Int              @id @default(autoincrement())
  user                      User             @relation(fields: [userId], references: [id])
  userId                    Int
  name                      String
  keywords                  String?
  type                      CategoryType
  createdAt                 DateTime         @default(now())
  expenses                  Expense[]
  incomes                   Income[]
  categorizationHistory     UserCategorizationHistory[]
  merchantLearning          MerchantLearning[]
  categoryPatterns          CategoryPattern[]
  cliqPatterns              CliqPattern[]
  recurringPayments         RecurringPayment[]

  @@unique([userId, name], name: "userId_name")
}

enum CategoryType {
  EXPENSE
  INCOME
}

model Expense {
  id         Int        @id @default(autoincrement())
  amount     Float
  category   Category   @relation(fields: [categoryId], references: [id])
  categoryId Int
  user       User       @relation(fields: [userId], references: [id])
  userId     Int
  merchant   String?    // Added to store merchant info
  createdAt  DateTime   @default(now())
}

model Income {
  id         Int        @id @default(autoincrement())
  amount     Float
  category   Category   @relation(fields: [categoryId], references: [id])
  categoryId Int
  user       User       @relation(fields: [userId], references: [id])
  userId     Int
  merchant   String?    // Added to store merchant info
  createdAt  DateTime   @default(now())
}

model PushToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
}

model SurvivalBudget {
  id           Int       @id @default(autoincrement())
  user         User      @relation(fields: [userId], references: [id])
  userId       Int
  amount       Float
  startDate    DateTime
  endDate      DateTime
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@unique([userId, startDate])
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())
  
  @@index([userId])
  @@index([expiresAt])
}

// Smart categorization learning tables
model UserCategorizationHistory {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  merchant    String
  amount      Float
  categoryId  Int
  category    Category @relation(fields: [categoryId], references: [id])
  messageType String   // 'cliq_incoming', 'cliq_outgoing', 'bank_debit', 'bank_credit'
  confidence  Float    // The confidence score when this was categorized
  wasCorrect  Boolean  @default(true) // If user corrected it, mark as false
  timestamp   DateTime
  createdAt   DateTime @default(now())
  
  @@index([userId, merchant])
  @@index([userId, categoryId])
  @@index([messageType])
}

model MerchantLearning {
  id               Int      @id @default(autoincrement())
  userId           Int
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  merchant         String
  normalizedName   String   // Cleaned merchant name for matching
  categoryId       Int
  category         Category @relation(fields: [categoryId], references: [id])
  confidence       Float    @default(1.0)
  useCount         Int      @default(1)
  lastUsed         DateTime @default(now())
  messageType      String   // Type of transaction this applies to
  averageAmount    Float?
  amountRange      Json?    // {"min": 10, "max": 100} for amount patterns
  timePatterns     Json?    // {"preferredHours": [9,10,11], "preferredDays": [1,2,3]}
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  @@unique([userId, merchant, categoryId, messageType])
  @@index([userId, normalizedName])
}

model CategoryPattern {
  id                Int      @id @default(autoincrement())
  userId            Int
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  categoryId        Int
  category          Category @relation(fields: [categoryId], references: [id])
  messageType       String
  typicalAmounts    Json     // {"ranges": [{"min": 20, "max": 50, "frequency": 0.7}]}
  timePatterns      Json     // Time-based patterns for this category
  keywordPatterns   Json     // Learned keywords beyond the static ones
  confidenceWeight  Float    @default(1.0)
  transactionCount  Int      @default(0)
  lastUpdated       DateTime @default(now())
  createdAt         DateTime @default(now())
  
  @@unique([userId, categoryId, messageType])
  @@index([userId, categoryId])
}

model CliqPattern {
  id                 Int      @id @default(autoincrement())
  userId             Int
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  senderName         String
  normalizedSender   String   // Cleaned sender name
  categoryId         Int
  category           Category @relation(fields: [categoryId], references: [id])
  transactionType    String   // 'income' or 'expense'
  isRecurring        Boolean  @default(false)
  frequency          String?  // 'weekly', 'monthly', 'yearly'
  averageAmount      Float
  amountVariance     Float    @default(0.0)
  confidence         Float    @default(1.0)
  useCount           Int      @default(1)
  lastSeen           DateTime @default(now())
  isBusinessLike     Boolean  @default(false) // Detected business vs personal
  patterns           Json?    // Additional patterns specific to this sender
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  
  @@unique([userId, normalizedSender, transactionType])
  @@index([userId, senderName])
  @@index([isRecurring])
}

model RecurringPayment {
  id                Int                     @id @default(autoincrement())
  userId            Int
  user              User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  name              String                  // "Rent", "Car Loan", "Gym Membership"
  description       String?                 // Optional description
  amount            Float                   // Expected amount
  categoryId        Int
  category          Category                @relation(fields: [categoryId], references: [id])
  frequency         RecurringFrequency      // Monthly, Weekly, etc.
  dayOfMonth        Int?                    // 15 for "15th of each month"
  dayOfWeek         Int?                    // 1-7 for weekly payments
  isActive          Boolean                 @default(true)
  isAutoDetected    Boolean                 @default(false) // true if detected automatically
  merchant          String?                 // Associated merchant if any
  lastProcessed     DateTime?               // Last time this was processed
  nextDue           DateTime                // Next expected payment date
  tolerance         Json?                   // {"amount": {"min": 90, "max": 110}, "days": 3}
  reminders         Json?                   // {"enabled": true, "daysBefore": [7, 3, 1]}
  detectionPattern  Json?                   // Pattern used for auto-detection
  createdAt         DateTime                @default(now())
  updatedAt         DateTime                @updatedAt
  
  @@index([userId, isActive])
  @@index([nextDue])
  @@index([isAutoDetected])
}

enum RecurringFrequency {
  WEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
}