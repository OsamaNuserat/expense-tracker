// Updated Prisma schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int              @id @default(autoincrement())
  email            String           @unique
  password         String
  createdAt        DateTime         @default(now())
  messages         Message[]
  expenses         Expense[]
  incomes          Income[]
  categories       Category[]
  pushTokens       PushToken[]
  survivalBudgets  SurvivalBudget[]   
}

model Message {
  id             Int      @id @default(autoincrement())
  content        String
  user           User     @relation(fields: [userId], references: [id])
  userId         Int
  createdAt      DateTime @default(now())
  parsedData     Json?    // Added to store parsed message data
}

model Category {
  id               Int              @id @default(autoincrement())
  user             User             @relation(fields: [userId], references: [id])
  userId           Int
  name             String
  keywords         String?
  type             CategoryType
  createdAt        DateTime         @default(now())
  expenses         Expense[]
  incomes          Income[]

  @@unique([userId, name], name: "userId_name")
}

enum CategoryType {
  EXPENSE
  INCOME
}

model Expense {
  id         Int        @id @default(autoincrement())
  amount     Float
  category   Category   @relation(fields: [categoryId], references: [id])
  categoryId Int
  user       User       @relation(fields: [userId], references: [id])
  userId     Int
  merchant   String?    // Added to store merchant info
  createdAt  DateTime   @default(now())
}

model Income {
  id         Int        @id @default(autoincrement())
  amount     Float
  category   Category   @relation(fields: [categoryId], references: [id])
  categoryId Int
  user       User       @relation(fields: [userId], references: [id])
  userId     Int
  merchant   String?    // Added to store merchant info
  createdAt  DateTime   @default(now())
}

model PushToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
}

model SurvivalBudget {
  id           Int       @id @default(autoincrement())
  user         User      @relation(fields: [userId], references: [id])
  userId       Int
  amount       Float
  startDate    DateTime
  endDate      DateTime
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@unique([userId, startDate])
}